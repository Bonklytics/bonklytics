# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Edward West
# This file is distributed under the same license as the PyBroker package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyBroker \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-04 01:17+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/notebooks/6. Model.ipynb:9 Training a
#: e64e258e041d4c99bf6a12ae5399dc8e
msgid "Training a Model"
msgstr "训练模型"

#: ../../source/notebooks/6. 9544aafc33264d66b8d4a286a81dd32a Model.ipynb:11
#: Training a
msgid ""
"In the `last notebook "
"<https://www.pybroker.com/en/latest/notebooks/5.%20Writing%20Indicators.html>`__,"
" we learned how to write stock indicators in **PyBroker**. Indicators are"
" a good starting point for developing a trading strategy. But to create a"
" successful strategy, it is likely that a more sophisticated approach "
"using predictive modeling will be needed."
msgstr ""

#: ../../source/notebooks/6. 0aa93f7543134d8d9fbf092ecc508099 Model.ipynb:13
#: Training a
msgid ""
"Fortunately, one of the main features of **PyBroker** is the ability to "
"train and backtest machine learning models. These models can utilize "
"indicators as features to make more accurate predictions about market "
"movements. Once trained, these models can be backtested using a popular "
"technique known as `Walkforward Analysis <https://www.youtube.com/watch?v"
"=WBZ_Vv-iMv4>`__, which simulates how a strategy would perform during "
"actual trading."
msgstr ""

#: ../../source/notebooks/6. 8d6d7ca9e79a4da89f045faf596cef31 Model.ipynb:15
#: Training a
msgid ""
"We'll explain Walkforward Analysis more in depth later in this notebook. "
"But first, let's get started with some needed imports!"
msgstr ""

#: ../../source/notebooks/6. Model.ipynb:40 Training a
#: f1b8cd0e6e384e02ba52bf98c6eb0772
msgid ""
"As with `DataSource "
"<https://www.pybroker.com/en/latest/reference/pybroker.data.html#pybroker.data.DataSource>`__"
" and `Indicator "
"<https://www.pybroker.com/en/latest/reference/pybroker.indicator.html#pybroker.indicator.Indicator>`__"
" data, **PyBroker** can also cache trained models to disk. You can enable"
" caching for all three by calling `pybroker.enable_caches "
"<https://www.pybroker.com/en/latest/reference/pybroker.cache.html#pybroker.cache.enable_caches>`__:"
msgstr ""

#: ../../source/notebooks/6. 1a6248887a984de0a38a161c75176b71 Model.ipynb:61
#: Training a
msgid ""
"In `the last notebook "
"<https://www.pybroker.com/en/latest/notebooks/5.%20Writing%20Indicators.html>`__,"
" we implemented an indicator that calculates the close-minus-moving-"
"average (CMMA) using `NumPy <https://www.numpy.org>`__ and `Numba "
"<https://numba.pydata.org/>`__. Here's the code for the CMMA indicator "
"again:"
msgstr ""

#: ../../source/notebooks/6. 9408e4825e1042e3b704452ba09f446b Model.ipynb:105
#: Training a
msgid "Train and Backtest"
msgstr ""

#: ../../source/notebooks/6. Model.ipynb:107 Training a
#: a0f591568edf43a2aca8e306333537b0
msgid ""
"Next, we want to build a model that predicts the next day's return using "
"the 20-day CMMA. Using `simple linear regression "
"<https://en.wikipedia.org/wiki/Simple_linear_regression>`__ is a good "
"approach to begin experimenting with. Below we import a `LinearRegression"
" <https://scikit-"
"learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html>`__"
" model from `scikit-learn <https://scikit-learn.org/stable/>`__:"
msgstr ""

#: ../../source/notebooks/6. 884a719b31f04a289d33429933c3eff6 Model.ipynb:129
#: Training a
msgid ""
"We create a ``train_slr`` function to train the ``LinearRegression`` "
"model:"
msgstr ""

#: ../../source/notebooks/6. Model.ipynb:180 Training a
#: b6aba54337bc41f8b7ea196a354d790e
msgid ""
"The ``train_slr`` function uses the 20-day CMMA as the input feature, or "
"predictor, for the ``LinearRegression`` model. The function then fits the"
" ``LinearRegression`` model to the training data for that stock symbol."
msgstr ""

#: ../../source/notebooks/6. 39f75a33e4194439bbaf4cb066952c4e Model.ipynb:182
#: Training a
msgid ""
"After fitting the model, the function uses the testing data to evaluate "
"the model's accuracy, specifically by computing the `R-squared "
"<https://en.wikipedia.org/wiki/Coefficient_of_determination>`__ score. "
"The R-squared score provides a measure of how well the "
"``LinearRegression`` model fits the testing data."
msgstr ""

#: ../../source/notebooks/6. 978c0323bc724454bed1265fe181bb35 Model.ipynb:184
#: Training a
msgid ""
"The final output of the ``train_slr`` function is the trained "
"``LinearRegression`` model specifically for that stock symbol, along with"
" the ``cmma_20`` column, which is to be used as input data when making "
"predictions. **PyBroker** will use this model to predict the next day's "
"return of the stock during the backtest. The ``train_slr`` function will "
"be called for each stock symbol, and the trained models will be used to "
"predict the next day's return for each individual stock."
msgstr ""

#: ../../source/notebooks/6. 5585979d3fb84389978ac0db81bc5b1f Model.ipynb:186
#: Training a
msgid ""
"Once the function to train the model has been defined, it needs to be "
"registered with **PyBroker**. This is done by creating a new `ModelSource"
" "
"<https://www.pybroker.com/en/latest/reference/pybroker.model.html#pybroker.model.ModelSource>`__"
" instance using the `pybroker.model "
"<https://www.pybroker.com/en/latest/reference/pybroker.model.html#pybroker.model.model>`__"
" function. The arguments to this function are the name of the model "
"(``'slr'`` in this case), the function that will train the model "
"(``train_slr``), and a list of indicators to use as inputs for the model "
"(in this case, ``cmma_20``)."
msgstr ""

#: ../../source/notebooks/6. Model.ipynb:208 Training a
#: def06ba1f1554f4b90fc88e8df5bf16a
msgid ""
"To create a trading strategy that uses the trained model, a new `Strategy"
" "
"<https://www.pybroker.com/en/latest/reference/pybroker.strategy.html#pybroker.strategy.Strategy>`__"
" object is created using the `YFinance "
"<https://www.pybroker.com/en/latest/reference/pybroker.data.html#pybroker.data.YFinance>`__"
" data source, and specifying the start and end dates for the backtest "
"period."
msgstr ""

#: ../../source/notebooks/6. 267dadc8ccf449e6b2135a03f08cb320 Model.ipynb:231
#: Training a
msgid ""
"The `add_execution "
"<https://www.pybroker.com/en/latest/reference/pybroker.strategy.html#pybroker.strategy.Strategy.add_execution>`__"
" method is then called on the `Strategy "
"<https://www.pybroker.com/en/latest/reference/pybroker.strategy.html#pybroker.strategy.Strategy>`__"
" object to specify the details of the trading execution. In this case, a "
"``None`` value is passed as the first argument, which means that no "
"trading function will be used during the backtest."
msgstr ""

#: ../../source/notebooks/6. Model.ipynb:233 Training a
#: bb2e2f79c4d34f64998956cb90a46b6d
msgid ""
"The last step is to run the backtest by calling the `backtest "
"<https://www.pybroker.com/en/latest/reference/pybroker.strategy.html#pybroker.strategy.Strategy.backtest>`__"
" method on the ``Strategy`` object, with a ``train_size`` of ``0.5`` to "
"specify that the model should be trained on the first half of the "
"backtest data, and tested on the second half."
msgstr ""

#: ../../source/notebooks/6. 9c535a6a478d4777ad60def01d3dc1b8 Model.ipynb:366
#: Training a
msgid "Walkforward Analysis"
msgstr ""

#: ../../source/notebooks/6. Model.ipynb:368 Training a
#: aa87fbf476b146a2a5db4e8b9e6c1b38
msgid ""
"**PyBroker** employs a powerful algorithm known as `Walkforward Analysis "
"<https://www.youtube.com/watch?v=WBZ_Vv-iMv4>`__ to perform backtesting. "
"The algorithm partitions the backtest data into a fixed number of time "
"windows, each containing a train-test split of data."
msgstr ""

#: ../../source/notebooks/6. 4b6f12e93b7d4c2ca4a7ff1a3a0a42c7 Model.ipynb:370
#: Training a
msgid ""
"The Walkforward Analysis algorithm then proceeds to \"walk forward\" in "
"time, in the same manner that a trading strategy would be executed in the"
" real world. The model is first trained on the earliest window and then "
"evaluated on the test data in that window."
msgstr ""

#: ../../source/notebooks/6. Model.ipynb:372 Training a
#: f38e2d29ffab4bceb524c69da66e16fb
msgid ""
"As the algorithm moves forward to evaluate the next window in time, the "
"test data from the previous window is added to the training data. This "
"process continues until all of the time windows are evaluated."
msgstr ""

#: ../../source/notebooks/6. Model.ipynb:-1 Training a
#: d3b64beeba6249e89989b8b0527de591
msgid "Walkforward Diagram"
msgstr ""

#: ../../source/notebooks/6. Model.ipynb:377 Training a
#: f93e2f371e6c4c889dfc5ad6d0859327
msgid ""
"By using this approach, the Walkforward Analysis algorithm is able to "
"simulate the real-world performance of a trading strategy, and produce "
"more reliable and accurate backtesting results."
msgstr ""

#: ../../source/notebooks/6. 7dd9d26c5eda43acad3a88e0553bde68 Model.ipynb:379
#: Training a
msgid ""
"Let's consider a trading strategy that generates buy and sell signals "
"from the `LinearRegression <https://scikit-"
"learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html>`__"
" model that we trained earlier. The strategy is implemented as the "
"``hold_long`` function:"
msgstr ""

#: ../../source/notebooks/6. 63e13f5397274f8794b080caa0f96a35 Model.ipynb:411
#: Training a
msgid ""
"The ``hold_long`` function opens a long position when the model predicts "
"a positive return for the next bar, and then closes the position when the"
" model predicts a negative return."
msgstr ""

#: ../../source/notebooks/6. 46a8ef614dfd41e8b9fcd167de6cf48a Model.ipynb:413
#: Training a
msgid ""
"The `ctx.preds('slr') "
"<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.preds>`__"
" method is used to access the predictions made by the ``'slr'`` model for"
" the current stock symbol being executed in the function (NVDA or AMD). "
"The predictions are stored in a `NumPy array "
"<https://numpy.org/doc/stable/reference/generated/numpy.array.html>`__, "
"and the most recent prediction for the current stock symbol is accessed "
"using ``ctx.preds('slr')[-1]``, which is the model's prediction of the "
"next bar's return."
msgstr ""

#: ../../source/notebooks/6. 48061780f1bb49e2a808c91f94580be8 Model.ipynb:416
#: Training a
msgid ""
"Now that we have defined a trading strategy and registered the ``'slr'`` "
"model, we can run the backtest using the Walkforward Analysis algorithm."
msgstr ""

#: ../../source/notebooks/6. Model.ipynb:418 Training a
#: af78b8d03db944c4b7ea515fcb6402ca
msgid ""
"The backtest is run by calling the `walkforward "
"<https://www.pybroker.com/en/latest/reference/pybroker.strategy.html#pybroker.strategy.Strategy.walkforward>`__"
" method on the ``Strategy`` object, with the desired number of time "
"windows and train/test split ratio. In this case, we will use 3 time "
"windows, each with a 50/50 train-test split."
msgstr ""

#: ../../source/notebooks/6. 10fb0c43b2f1438a9045fb97b492872e Model.ipynb:420
#: Training a
msgid ""
"Additionally, since our ``'slr'`` model makes a prediction for one bar in"
" the future, we need to specify the ``lookahead`` parameter as ``1``. "
"This is necessary to ensure that training data does not leak into the "
"test boundary. The ``lookahead`` parameter should always be set to the "
"number of bars in the future being predicted."
msgstr ""

#: ../../source/notebooks/6. 5ca0f62ecaab4e9d931793b10c5c6081 Model.ipynb:705
#: Training a
msgid ""
"During the backtesting process using the Walkforward Analysis algorithm, "
"the ``'slr'`` model is trained on a given window's training data, and "
"then the ``hold_long`` function runs on the same window's test data."
msgstr ""

#: ../../source/notebooks/6. Model.ipynb:707 Training a
#: e6ba23ca13f0405ab7ee51a5bdc0c9ae
msgid ""
"The model is trained on the training data to make predictions about the "
"next day's returns. The ``hold_long`` function then uses these "
"predictions to make buy or sell decisions for the current day's trading "
"session."
msgstr ""

#: ../../source/notebooks/6. Model.ipynb:709 Training a
#: b3c6ba22639d45dc8f2126cbcd20a33d
msgid ""
"By evaluating the performance of the trading strategy on the test data "
"for each window, we can see how well the strategy is likely to perform in"
" real-world trading conditions. This process is repeated for each time "
"window in the backtest, using the results to evaluate the overall "
"performance of the trading strategy:"
msgstr ""

#: ../../source/notebooks/6. Model.ipynb:1343 Training a
#: cbb96b76dd0c47298cdece1609c53f4f
msgid ""
"In summary, we have now completed the process of training and backtesting"
" a linear regression model using **PyBroker**, with the help of "
"Walkforward Analysis. The metrics that we have seen are based on the test"
" data from all of the time windows in the backtest. Although our trading "
"strategy needs to be improved, we have gained a good understanding of how"
" to train and evaluate a model in **PyBroker**."
msgstr ""

#: ../../source/notebooks/6. Model.ipynb:1345 Training a
#: da6d4a6b6b7740e8bbe0deb080957dda
msgid ""
"Please keep in mind that before conducting regression analysis, it is "
"important to verify certain assumptions such as `homoscedasticity "
"<https://en.wikipedia.org/wiki/Homoscedasticity_and_heteroscedasticity>`__,"
" normality of residuals, etc. I have not provided the details for these "
"assumptions here for the sake of brevity and recommend that you perform "
"this exercise on your own."
msgstr ""

#: ../../source/notebooks/6. Model.ipynb:1347 Training a
#: ad0f4262a7044ce79f08f7315ab76926
msgid ""
"We are also not limited to just building linear regression models in "
"**PyBroker**. We can train other model types such as gradient boosted "
"machines, neural networks, or any other architecture that we choose. This"
" flexibility allows us to explore and experiment with various models and "
"approaches to find the best performing model for our specific trading "
"goals."
msgstr ""

#: ../../source/notebooks/6. 9b49b29165ea478d989178d403c359e1 Model.ipynb:1349
#: Training a
msgid ""
"PyBroker also offers customization options, such as the ability to "
"specify an `input_data_fn "
"<https://www.pybroker.com/en/latest/reference/pybroker.model.html#pybroker.model.model>`__"
" for our model in case we need to customize how its input data is built. "
"This would be required when constructing input for autoregressive models "
"(i.e. ARMA or RNN) that use multiple past values to make predictions. "
"Similarly, we can specify our own `predict_fn "
"<https://www.pybroker.com/en/latest/reference/pybroker.model.html#pybroker.model.model>`__"
" to customize how predictions are made (by default, the model's "
"``predict`` function is called)."
msgstr ""

#: ../../source/notebooks/6. 1797cd0b4f7e4372a23b71105968e4e8 Model.ipynb:1352
#: Training a
msgid ""
"With this knowledge, you can start building and testing your own models "
"and trading strategies in **PyBroker**, and begin exploring the vast "
"possibilities that this framework offers!"
msgstr ""

#~ msgid ""
#~ "We'll explain Walkforward Analysis more "
#~ "in depth later in this notebook. "
#~ "But first, let's get started with "
#~ "some needed imports!"
#~ msgstr ""

#~ msgid ""
#~ "In `the last notebook "
#~ "<https://www.pybroker.com/en/latest/notebooks/5.%20Writing%20Indicators.html>`__,"
#~ " we implemented an indicator that "
#~ "calculates the close-minus-moving-"
#~ "average (CMMA) using `NumPy "
#~ "<https://www.numpy.org>`__ and `Numba "
#~ "<https://numba.pydata.org/>`__. Here's the code "
#~ "for the CMMA indicator again:"
#~ msgstr ""

#~ msgid ""
#~ "Next, we want to build a model "
#~ "that predicts the next day's return "
#~ "using the 20-day CMMA. Using `simple "
#~ "linear regression "
#~ "<https://en.wikipedia.org/wiki/Simple_linear_regression>`__ is"
#~ " a good approach to begin "
#~ "experimenting with. Below we import a"
#~ " `LinearRegression <https://scikit-"
#~ "learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html>`__"
#~ " model from `scikit-learn <https"
#~ "://scikit-learn.org/stable/>`__:"
#~ msgstr ""

#~ msgid ""
#~ "After fitting the model, the function"
#~ " uses the testing data to evaluate"
#~ " the model's accuracy, specifically by "
#~ "computing the `R-squared "
#~ "<https://en.wikipedia.org/wiki/Coefficient_of_determination>`__ "
#~ "score. The R-squared score provides a"
#~ " measure of how well the "
#~ "``LinearRegression`` model fits the testing"
#~ " data."
#~ msgstr ""

#~ msgid ""
#~ "The final output of the ``train_slr``"
#~ " function is the trained "
#~ "``LinearRegression`` model specifically for "
#~ "that stock symbol, along with the "
#~ "``cmma_20`` column, which is to be "
#~ "used as input data when making "
#~ "predictions. **PyBroker** will use this "
#~ "model to predict the next day's "
#~ "return of the stock during the "
#~ "backtest. The ``train_slr`` function will "
#~ "be called for each stock symbol, "
#~ "and the trained models will be "
#~ "used to predict the next day's "
#~ "return for each individual stock."
#~ msgstr ""

#~ msgid ""
#~ "The Walkforward Analysis algorithm then "
#~ "proceeds to \"walk forward\" in time,"
#~ " in the same manner that a "
#~ "trading strategy would be executed in"
#~ " the real world. The model is "
#~ "first trained on the earliest window "
#~ "and then evaluated on the test "
#~ "data in that window."
#~ msgstr ""

#~ msgid ""
#~ "Let's consider a trading strategy that"
#~ " generates buy and sell signals from"
#~ " the `LinearRegression <https://scikit-"
#~ "learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html>`__"
#~ " model that we trained earlier. The"
#~ " strategy is implemented as the "
#~ "``hold_long`` function:"
#~ msgstr ""

#~ msgid ""
#~ "The `ctx.preds('slr') "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.preds>`__"
#~ " method is used to access the "
#~ "predictions made by the ``'slr'`` model"
#~ " for the current stock symbol being"
#~ " executed in the function (NVDA or"
#~ " AMD). The predictions are stored in"
#~ " a `NumPy array "
#~ "<https://numpy.org/doc/stable/reference/generated/numpy.array.html>`__,"
#~ " and the most recent prediction for"
#~ " the current stock symbol is accessed"
#~ " using ``ctx.preds('slr')[-1]``, which is "
#~ "the model's prediction of the next "
#~ "bar's return."
#~ msgstr ""

#~ msgid ""
#~ "During the backtesting process using the"
#~ " Walkforward Analysis algorithm, the "
#~ "``'slr'`` model is trained on a "
#~ "given window's training data, and then"
#~ " the ``hold_long`` function runs on "
#~ "the same window's test data."
#~ msgstr ""

#~ msgid ""
#~ "The model is trained on the "
#~ "training data to make predictions about"
#~ " the next day's returns. The "
#~ "``hold_long`` function then uses these "
#~ "predictions to make buy or sell "
#~ "decisions for the current day's trading"
#~ " session."
#~ msgstr ""

#~ msgid ""
#~ "PyBroker also offers customization options,"
#~ " such as the ability to specify "
#~ "an `input_data_fn "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.model.html#pybroker.model.model>`__"
#~ " for our model in case we need"
#~ " to customize how its input data "
#~ "is built. This would be required "
#~ "when constructing input for autoregressive "
#~ "models (i.e. ARMA or RNN) that use"
#~ " multiple past values to make "
#~ "predictions. Similarly, we can specify "
#~ "our own `predict_fn "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.model.html#pybroker.model.model>`__"
#~ " to customize how predictions are "
#~ "made (by default, the model's "
#~ "``predict`` function is called)."
#~ msgstr ""

#~ msgid ""
#~ "We’ll explain Walkforward Analysis more "
#~ "in depth later in this notebook. "
#~ "But first, let’s get started with "
#~ "some needed imports!"
#~ msgstr ""

#~ msgid ""
#~ "In `the last notebook "
#~ "<https://www.pybroker.com/en/latest/notebooks/5.%20Writing%20Indicators.html>`__,"
#~ " we implemented an indicator that "
#~ "calculates the close-minus-moving-"
#~ "average (CMMA) using `NumPy "
#~ "<https://www.numpy.org>`__ and `Numba "
#~ "<https://numba.pydata.org/>`__. Here’s the code "
#~ "for the CMMA indicator again:"
#~ msgstr ""

#~ msgid ""
#~ "Next, we want to build a model "
#~ "that predicts the next day’s return "
#~ "using the 20-day CMMA. Using `simple "
#~ "linear regression "
#~ "<https://en.wikipedia.org/wiki/Simple_linear_regression>`__ is"
#~ " a good approach to begin "
#~ "experimenting with. Below we import a"
#~ " `LinearRegression <https://scikit-"
#~ "learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html>`__"
#~ " model from `scikit-learn <https"
#~ "://scikit-learn.org/stable/>`__:"
#~ msgstr ""

#~ msgid ""
#~ "After fitting the model, the function"
#~ " uses the testing data to evaluate"
#~ " the model’s accuracy, specifically by "
#~ "computing the `R-squared "
#~ "<https://en.wikipedia.org/wiki/Coefficient_of_determination>`__ "
#~ "score. The R-squared score provides a"
#~ " measure of how well the "
#~ "``LinearRegression`` model fits the testing"
#~ " data."
#~ msgstr ""

#~ msgid ""
#~ "The final output of the ``train_slr``"
#~ " function is the trained "
#~ "``LinearRegression`` model specifically for "
#~ "that stock symbol, along with the "
#~ "``cmma_20`` column, which is to be "
#~ "used as input data when making "
#~ "predictions. **PyBroker** will use this "
#~ "model to predict the next day’s "
#~ "return of the stock during the "
#~ "backtest. The ``train_slr`` function will "
#~ "be called for each stock symbol, "
#~ "and the trained models will be "
#~ "used to predict the next day’s "
#~ "return for each individual stock."
#~ msgstr ""

#~ msgid ""
#~ "The Walkforward Analysis algorithm then "
#~ "proceeds to “walk forward” in time, "
#~ "in the same manner that a trading"
#~ " strategy would be executed in the"
#~ " real world. The model is first "
#~ "trained on the earliest window and "
#~ "then evaluated on the test data in"
#~ " that window."
#~ msgstr ""

#~ msgid "|Walkforward Diagram|"
#~ msgstr ""

#~ msgid ""
#~ "Let’s consider a trading strategy that"
#~ " generates buy and sell signals from"
#~ " the `LinearRegression <https://scikit-"
#~ "learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html>`__"
#~ " model that we trained earlier. The"
#~ " strategy is implemented as the "
#~ "``hold_long`` function:"
#~ msgstr ""

#~ msgid ""
#~ "The `ctx.preds(‘slr’) "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.preds>`__"
#~ " method is used to access the "
#~ "predictions made by the ``'slr'`` model"
#~ " for the current stock symbol being"
#~ " executed in the function (NVDA or"
#~ " AMD). The predictions are stored in"
#~ " a `NumPy array "
#~ "<https://numpy.org/doc/stable/reference/generated/numpy.array.html>`__,"
#~ " and the most recent prediction for"
#~ " the current stock symbol is accessed"
#~ " using ``ctx.preds('slr')[-1]``, which is "
#~ "the model’s prediction of the next "
#~ "bar’s return."
#~ msgstr ""

#~ msgid ""
#~ "During the backtesting process using the"
#~ " Walkforward Analysis algorithm, the "
#~ "``'slr'`` model is trained on a "
#~ "given window’s training data, and then"
#~ " the ``hold_long`` function runs on "
#~ "the same window’s test data."
#~ msgstr ""

#~ msgid ""
#~ "The model is trained on the "
#~ "training data to make predictions about"
#~ " the next day’s returns. The "
#~ "``hold_long`` function then uses these "
#~ "predictions to make buy or sell "
#~ "decisions for the current day’s trading"
#~ " session."
#~ msgstr ""

#~ msgid ""
#~ "PyBroker also offers customization options,"
#~ " such as the ability to specify "
#~ "an `input_data_fn "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.model.html#pybroker.model.model>`__"
#~ " for our model in case we need"
#~ " to customize how its input data "
#~ "is built. This would be required "
#~ "when constructing input for autoregressive "
#~ "models (i.e. ARMA or RNN) that use"
#~ " multiple past values to make "
#~ "predictions. Similarly, we can specify "
#~ "our own `predict_fn "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.model.html#pybroker.model.model>`__"
#~ " to customize how predictions are "
#~ "made (by default, the model’s "
#~ "``predict`` function is called)."
#~ msgstr ""

