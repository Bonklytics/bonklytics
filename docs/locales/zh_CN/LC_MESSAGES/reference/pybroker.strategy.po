# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Edward West
# This file is distributed under the same license as the PyBroker package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyBroker \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-05 11:51+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/reference/pybroker.strategy.rst:2
#: 041458841bf64124a3a02648367d6e90
msgid "pybroker.strategy module"
msgstr ""

#~ msgid "numpy.ndarray[Any, numpy.dtype[numpy.int32]]"
#~ msgstr ""

#~ msgid "numpy.ndarray[Any, numpy.dtype[numpy.int64]]"
#~ msgstr ""

#~ msgid "Contains implementation for backtesting trading strategies."
#~ msgstr ""

#~ msgid "Bases: :py:class:`object`"
#~ msgstr ""

#~ msgid "Mixin implementing backtesting functionality."
#~ msgstr ""

#~ msgid ""
#~ "Backtests a ``set`` of :class:`.Execution`\\"
#~ " s that implement trading logic."
#~ msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid ":class:`pybroker.config.StrategyConfig`."
#~ msgstr ""

#~ msgid ":class:`.Execution`\\ s to run."
#~ msgstr ""

#~ msgid ""
#~ ":class:`Mapping` of symbols to "
#~ ":class:`Mapping` of custom data that "
#~ "persists for every bar during the "
#~ ":class:`.Execution`."
#~ msgstr ""

#~ msgid ""
#~ ":class:`Mapping` of :class:`pybroker.common.ModelSymbol`"
#~ " pairs to :class:`pybroker.common.TrainedModel`\\ "
#~ "s."
#~ msgstr ""

#~ msgid ""
#~ ":class:`Mapping` of "
#~ ":class:`pybroker.common.IndicatorSymbol` pairs to "
#~ ":class:`pandas.Series` of "
#~ ":class:`pybroker.indicator.Indicator` values."
#~ msgstr ""

#~ msgid ":class:`pandas.DataFrame` of test data."
#~ msgstr ""

#~ msgid ":class:`pybroker.portfolio.Portfolio`."
#~ msgstr ""

#~ msgid ""
#~ ":class:`Callable` that sets position sizes "
#~ "when placing orders for buy and "
#~ "sell signals."
#~ msgstr ""

#~ msgid ":class:`Mapping` of symbols to exit dates."
#~ msgstr ""

#~ msgid "Whether to enable trading fractional shares."
#~ msgstr ""

#~ msgid "Number of bars that need to pass before running the executions."
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr ""

#~ msgid ":class:`.TestResult` of the backtest."
#~ msgstr ""

#~ msgid "Bases: :py:class:`~typing.NamedTuple`"
#~ msgstr ""

#~ msgid ""
#~ "Represents an execution of a "
#~ ":class:`.Strategy`. Holds a reference to "
#~ "a :class:`Callable` that implements trading"
#~ " logic."
#~ msgstr ""

#~ msgid "Unique ID."
#~ msgstr ""

#~ msgid "type"
#~ msgstr ""

#~ msgid "int"
#~ msgstr ""

#~ msgid "Ticker symbols used for execution of ``fn``."
#~ msgstr ""

#~ msgid "frozenset[str]"
#~ msgstr ""

#~ msgid "Implements trading logic."
#~ msgstr ""

#~ msgid "Callable[[pybroker.context.ExecContext], None] | None"
#~ msgstr ""

#~ msgid ""
#~ "Names of :class:`pybroker.model.ModelSource`\\ s "
#~ "used for execution of ``fn``."
#~ msgstr ""

#~ msgid ""
#~ "Names of :class:`pybroker.indicator.Indicator`\\ s"
#~ " used for execution of ``fn``."
#~ msgstr ""

#~ msgid ""
#~ "Bases: :py:class:`~pybroker.strategy.BacktestMixin`, "
#~ ":py:class:`~pybroker.eval.EvaluateMixin`, "
#~ ":py:class:`~pybroker.indicator.IndicatorsMixin`, "
#~ ":py:class:`~pybroker.model.ModelsMixin`, "
#~ ":py:class:`~pybroker.strategy.WalkforwardMixin`"
#~ msgstr ""

#~ msgid "Class representing a trading strategy to backtest."
#~ msgstr ""

#~ msgid ""
#~ ":class:`pybroker.data.DataSource` or "
#~ ":class:`pandas.DataFrame` of backtesting data."
#~ msgstr ""

#~ msgid "Starting date of the data to fetch from ``data_source`` (inclusive)."
#~ msgstr ""

#~ msgid "Ending date of the data to fetch from ``data_source`` (inclusive)."
#~ msgstr ""

#~ msgid "``Optional`` :class:`pybroker.config.StrategyConfig`."
#~ msgstr ""

#~ msgid "Adds an execution to backtest."
#~ msgstr ""

#~ msgid ""
#~ ":class:`Callable` invoked on every bar "
#~ "of data during the backtest and "
#~ "passed an :class:`pybroker.context.ExecContext` for"
#~ " each ticker symbol in ``symbols``."
#~ msgstr ""

#~ msgid ""
#~ "Ticker symbols used to run ``fn``, "
#~ "where ``fn`` is called separately for"
#~ " each symbol."
#~ msgstr ""

#~ msgid ""
#~ ":class:`Iterable` of :class:`pybroker.model.ModelSource`\\"
#~ " s to train/load for backtesting."
#~ msgstr ""

#~ msgid ""
#~ ":class:`Iterable` of "
#~ ":class:`pybroker.indicator.Indicator`\\ s to compute"
#~ " for backtesting."
#~ msgstr ""

#~ msgid ""
#~ "Backtests the trading strategy by "
#~ "running executions that were added with"
#~ " :meth:`.add_execution`."
#~ msgstr ""

#~ msgid ""
#~ "Starting date of the backtest "
#~ "(inclusive). Must be within ``start_date`` "
#~ "and ``end_date`` range that was passed"
#~ " to :meth:`.__init__`."
#~ msgstr ""

#~ msgid ""
#~ "Ending date of the backtest (inclusive)."
#~ " Must be within ``start_date`` and "
#~ "``end_date`` range that was passed to"
#~ " :meth:`.__init__`."
#~ msgstr ""

#~ msgid ""
#~ "Formatted string that specifies the "
#~ "timeframe resolution of the backtesting "
#~ "data. The timeframe string supports the"
#~ " following units:  - ``\"s\"``/``\"sec\"``: "
#~ "seconds - ``\"m\"``/``\"min\"``: minutes - "
#~ "``\"h\"``/``\"hour\"``: hours - "
#~ "``\"d\"``/``\"day\"``: days - "
#~ "``\"w\"``/``\"week\"``: weeks - "
#~ "``\"mo\"``/``\"month\"``: months  An example "
#~ "timeframe string is ``1h 30m``."
#~ msgstr ""

#~ msgid ""
#~ "Formatted string that specifies the "
#~ "timeframe resolution of the backtesting "
#~ "data. The timeframe string supports the"
#~ " following units:"
#~ msgstr ""

#~ msgid "``\"s\"``/``\"sec\"``: seconds"
#~ msgstr ""

#~ msgid "``\"m\"``/``\"min\"``: minutes"
#~ msgstr ""

#~ msgid "``\"h\"``/``\"hour\"``: hours"
#~ msgstr ""

#~ msgid "``\"d\"``/``\"day\"``: days"
#~ msgstr ""

#~ msgid "``\"w\"``/``\"week\"``: weeks"
#~ msgstr ""

#~ msgid "``\"mo\"``/``\"month\"``: months"
#~ msgstr ""

#~ msgid "An example timeframe string is ``1h 30m``."
#~ msgstr ""

#~ msgid ""
#~ "``tuple[str, str]`` of times of day "
#~ "e.g. ('9:30', '16:00') used to filter"
#~ " the backtesting data (inclusive)."
#~ msgstr ""

#~ msgid ""
#~ "Days (e.g. ``\"mon\"``, ``\"tues\"`` etc.) "
#~ "used to filter the backtesting data."
#~ msgstr ""

#~ msgid ""
#~ "Number of bars in the future of"
#~ " the target prediction. For example, "
#~ "predicting returns for the next bar "
#~ "would have a ``lookahead`` of ``1``. "
#~ "This quantity is needed to prevent "
#~ "training data from leaking into the "
#~ "test boundary."
#~ msgstr ""

#~ msgid ""
#~ "Amount of :class:`pybroker.data.DataSource` data "
#~ "to use for training, where the max"
#~ " ``train_size`` is ``1``. For example, "
#~ "a ``train_size`` of ``0.9`` would result"
#~ " in 90% of data being used for"
#~ " training and the remaining 10% of"
#~ " data being used for testing."
#~ msgstr ""

#~ msgid ""
#~ "Whether to randomly shuffle the data "
#~ "used for training. Defaults to "
#~ "``False``. Disabled when model caching "
#~ "is enabled via "
#~ ":meth:`pybroker.cache.enable_model_cache`."
#~ msgstr ""

#~ msgid ""
#~ "Whether to compute randomized bootstrap "
#~ "evaluation metrics. Defaults to ``False``."
#~ msgstr ""

#~ msgid ""
#~ "If ``True``, :class:`pybroker.indicator.Indicator` "
#~ "data is computed serially. If ``False``,"
#~ " :class:`pybroker.indicator.Indicator` data is "
#~ "computed in parallel using multiple "
#~ "processes. Defaults to ``False``."
#~ msgstr ""

#~ msgid ""
#~ ":class:`.BacktestResult` containing portfolio "
#~ "balances, order history, and evaluation "
#~ "metrics."
#~ msgstr ""

#~ msgid "Clears executions that were added with :meth:`.add_execution`."
#~ msgstr ""

#~ msgid ""
#~ ":class:`Callable[[Mapping[str, ExecContext]]` that "
#~ "runs after all execution functions."
#~ msgstr ""

#~ msgid ""
#~ ":class:`Callable` that takes a "
#~ ":class:`Mapping` of all ticker symbols "
#~ "to :class:`ExecContext`\\ s."
#~ msgstr ""

#~ msgid ""
#~ ":class:`Callable[[Mapping[str, ExecContext]]` that "
#~ "runs before all execution functions."
#~ msgstr ""

#~ msgid ""
#~ "Sets a :class:`Callable` that determines "
#~ "position sizes to use for buy and"
#~ " sell signals."
#~ msgstr ""

#~ msgid ""
#~ ":class:`Callable` invoked before placing "
#~ "orders for buy and sell signals, "
#~ "and is passed a "
#~ ":class:`pybroker.context.PosSizeContext`."
#~ msgstr ""

#~ msgid "Sets :class:`pybroker.slippage.SlippageModel`."
#~ msgstr ""

#~ msgid ""
#~ "Backtests the trading strategy using "
#~ "`Walkforward Analysis "
#~ "<https://www.pybroker.com/en/latest/notebooks/6.%20Training%20a%20Model.html"
#~ "#Walkforward-Analysis>`_. Backtesting data "
#~ "supplied by the :class:`pybroker.data.DataSource`"
#~ " is divided into ``windows`` number "
#~ "of equal sized time windows, with "
#~ "each window split into train and "
#~ "test data as specified by "
#~ "``train_size``. The backtest \"walks forward\""
#~ " in time through each window, running"
#~ " executions that were added with "
#~ ":meth:`.add_execution`."
#~ msgstr ""

#~ msgid "Number of walkforward time windows."
#~ msgstr ""

#~ msgid ""
#~ "Starting date of the Walkforward "
#~ "Analysis (inclusive). Must be within "
#~ "``start_date`` and ``end_date`` range that "
#~ "was passed to :meth:`.__init__`."
#~ msgstr ""

#~ msgid ""
#~ "Ending date of the Walkforward Analysis"
#~ " (inclusive). Must be within ``start_date``"
#~ " and ``end_date`` range that was "
#~ "passed to :meth:`.__init__`."
#~ msgstr ""

#~ msgid "Contains the results of backtesting a :class:`.Strategy`."
#~ msgstr ""

#~ msgid "Starting date of backtest."
#~ msgstr ""

#~ msgid "datetime.datetime"
#~ msgstr ""

#~ msgid "Ending date of backtest."
#~ msgstr ""

#~ msgid ""
#~ ":class:`pandas.DataFrame` of "
#~ ":class:`pybroker.portfolio.Portfolio` balances for "
#~ "every bar."
#~ msgstr ""

#~ msgid "pandas.core.frame.DataFrame"
#~ msgstr ""

#~ msgid ""
#~ ":class:`pandas.DataFrame` of "
#~ ":class:`pybroker.portfolio.Position` balances for "
#~ "every bar."
#~ msgstr ""

#~ msgid ":class:`pandas.DataFrame` of all orders that were placed."
#~ msgstr ""

#~ msgid ":class:`pandas.DataFrame` of all trades that were made."
#~ msgstr ""

#~ msgid "Evaluation metrics."
#~ msgstr ""

#~ msgid "pybroker.eval.EvalMetrics"
#~ msgstr ""

#~ msgid ":class:`pandas.DataFrame` of evaluation metrics."
#~ msgstr ""

#~ msgid "Randomized bootstrap evaluation metrics."
#~ msgstr ""

#~ msgid "pybroker.eval.BootstrapResult | None"
#~ msgstr ""

#~ msgid ""
#~ "Mixin implementing logic for `Walkforward "
#~ "Analysis "
#~ "<https://www.pybroker.com/en/latest/notebooks/6.%20Training%20a%20Model.html"
#~ "#Walkforward-Analysis>`_."
#~ msgstr ""

#~ msgid ""
#~ "Splits a :class:`pandas.DataFrame` containing "
#~ "data for multiple ticker symbols into"
#~ " an :class:`Iterator` of train/test time"
#~ " windows for `Walkforward Analysis "
#~ "<https://www.pybroker.com/en/latest/notebooks/6.%20Training%20a%20Model.html"
#~ "#Walkforward-Analysis>`_."
#~ msgstr ""

#~ msgid ""
#~ ":class:`pandas.DataFrame` of data to split "
#~ "into train/test windows for Walkforward "
#~ "Analysis."
#~ msgstr ""

#~ msgid ""
#~ "Amount of data in ``df`` to use"
#~ " for training, where the max "
#~ "``train_size`` is ``1``. For example, a"
#~ " ``train_size`` of ``0.9`` would result "
#~ "in 90% of data in ``df`` being "
#~ "used for training and the remaining "
#~ "10% of data being used for "
#~ "testing."
#~ msgstr ""

#~ msgid ""
#~ "Whether to randomly shuffle the data "
#~ "used for training. Defaults to "
#~ "``False``."
#~ msgstr ""

#~ msgid ""
#~ ":class:`Iterator` of :class:`.WalkforwardWindow`\\ s"
#~ " containing train and test data."
#~ msgstr ""

#~ msgid ""
#~ "Contains ``train_data`` and ``test_data`` of"
#~ " a time window used for `Walkforward"
#~ " Analysis "
#~ "<https://www.pybroker.com/en/latest/notebooks/6.%20Training%20a%20Model.html"
#~ "#Walkforward-Analysis>`_."
#~ msgstr ""

#~ msgid "Train data."
#~ msgstr ""

#~ msgid "Test data."
#~ msgstr ""

