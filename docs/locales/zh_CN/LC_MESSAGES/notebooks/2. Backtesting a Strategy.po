# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Edward West
# This file is distributed under the same license as the PyBroker package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyBroker \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-04 01:17+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:9 a
#: f469c73b543c4757a1f7971c4529a2ed
msgid "Backtesting a Strategy"
msgstr "回测一个策略"

#: ../../source/notebooks/2. 11a851c14d6a477eabbe6efc1308c865 Backtesting
#: Strategy.ipynb:11 a
msgid ""
"We're all set to test a basic trading strategy using **PyBroker**! To get"
" started, we'll import the necessary classes listed below:"
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:60 a
#: dc87c509bee04d4497b03544005be055
msgid ""
"For our backtest, we'll be using `Yahoo Finance "
"<https://finance.yahoo.com>`__ as our `DataSource "
"<https://www.pybroker.com/en/latest/reference/pybroker.data.html#pybroker.data.DataSource>`__."
" We'll also be using data source caching to ensure that we only download "
"the necessary data once when we run our backtests."
msgstr ""

#: ../../source/notebooks/2. 3174c2342c8c4cd795b2d52486b3cb9a Backtesting
#: Strategy.ipynb:62 a
msgid ""
"The next step is to set up a new instance of the `Strategy "
"<https://www.pybroker.com/en/latest/reference/pybroker.strategy.html#pybroker.strategy.Strategy>`__"
" class which will be used to perform a backtest on our trading strategy. "
"Here's how you can do it:"
msgstr ""

#: ../../source/notebooks/2. 92ccb73adce14426b423f0e748afe13e Backtesting
#: Strategy.ipynb:64 a
msgid ""
"First, you can create a `StrategyConfig "
"<https://www.pybroker.com/en/latest/reference/pybroker.config.html#pybroker.config.StrategyConfig>`__"
" object to configure the ``Strategy``. In this case, we're setting the "
"initial cash to ``500,000``:"
msgstr ""

#: ../../source/notebooks/2. 7dd3d0af33f146c48b1944836afa18d6 Backtesting
#: Strategy.ipynb:85 a
msgid ""
"Then, you can create a new instance of the ``Strategy`` class by passing "
"in the following arguments:"
msgstr ""

#: ../../source/notebooks/2. 28de783578734287bd8c17ba5bc32fa2 Backtesting
#: Strategy.ipynb:87 a
msgid "A data source: In this case, we're using Yahoo Finance as the data source."
msgstr ""

#: ../../source/notebooks/2. 213b891b666a4de18eac3eee818df5ee Backtesting
#: Strategy.ipynb:88 a
msgid "A start date: This is the starting date for the backtest."
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:89 a
#: c1c55c3b7f734a3ca240f5b3c402734e
msgid "An end date: This is the end date for the backtest."
msgstr ""

#: ../../source/notebooks/2. 420111c97d5b414aa9e72a8dfb7b4fed Backtesting
#: Strategy.ipynb:90 a
msgid "The configuration object created earlier."
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:111 a
#: e8d5bdac536744c0bb7b8e4f125cca6d
msgid ""
"The ``Strategy`` instance is now ready to download data from Yahoo "
"Finance for the period between March 1, 2017, and March 1, 2022, before "
"running the backtest using the specified configuration options. If you "
"need to modify other configuration options, you can refer to the "
"`StrategyConfig reference documentation "
"<https://www.pybroker.com/en/latest/reference/pybroker.config.html#pybroker.config.StrategyConfig>`__."
msgstr ""

#: ../../source/notebooks/2. 218d76241f6a4ab89522dc9d10f3f36a Backtesting
#: Strategy.ipynb:114 a
msgid "Defining Strategy Rules"
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:116 a
#: c98fa0488add414e9cf142052e8b5f52
msgid ""
"In this section, you will learn how to implement a basic trading strategy"
" in **PyBroker** with the following rules:"
msgstr ""

#: ../../source/notebooks/2. 39e45b1d794d46aba14e66d1ae304edd Backtesting
#: Strategy.ipynb:118 a
msgid ""
"Buy shares in a stock if the last close price is less than the low of the"
" previous bar and there is no open long position in that stock."
msgstr ""

#: ../../source/notebooks/2. 8b4125074fd540dd8d32cf8558fbba78 Backtesting
#: Strategy.ipynb:119 a
msgid ""
"Set the limit price of the buy order to 0.01 less than the last close "
"price."
msgstr ""

#: ../../source/notebooks/2. 4bee6e0b8b1c4913ae64197358d7292f Backtesting
#: Strategy.ipynb:120 a
msgid "Hold the position for 3 days before liquidating it at market price."
msgstr ""

#: ../../source/notebooks/2. 65ecdaa54b2f418e8376a2a6de8873c6 Backtesting
#: Strategy.ipynb:121 a
#, python-format
msgid ""
"Trade the rules on AAPL and MSFT, allocating up to 25% of the portfolio "
"to each."
msgstr ""

#: ../../source/notebooks/2. 4d99911ad79f45639637c0bf96dc5315 Backtesting
#: Strategy.ipynb:123 a
msgid ""
"To accomplish this, you will define a ``buy_low`` function that "
"**PyBroker** will call separately for AAPL and MSFT on every bar of data."
" Each bar corresponds to a single day of data:"
msgstr ""

#: ../../source/notebooks/2. 6cf338808fc84c88a1efe63d46d52cb9 Backtesting
#: Strategy.ipynb:156 a
msgid ""
"That is a lot to unpack! The ``buy_low`` function will receive an "
"`ExecContext "
"<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext>`__"
" (``ctx``) containing data for the current ticker symbol (AAPL or MSFT). "
"The ``ExecContext`` will contain all of the close prices up until the "
"most recent bar of the current ticker symbol. The latest close price is "
"retrieved with ``ctx.close[-1]``."
msgstr ""

#: ../../source/notebooks/2. 1c6ae959c8d445e3ab8d29adb03e869e Backtesting
#: Strategy.ipynb:158 a
#, python-format
msgid ""
"The ``buy_low`` function will use the ``ExecContext`` to place a buy "
"order. The number of shares to purchase is set using `ctx.buy_shares "
"<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.buy_shares>`__,"
" which is calculated with `ctx.calc_target_shares "
"<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.calc_target_shares>`__."
" In this case, the number of shares to buy will be equal to 25% of the "
"portfolio."
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:161 a
#: e65ff3414efc47e6b37d49c2cc7ec91e
msgid ""
"The limit price of the order is set with `buy_limit_price "
"<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.buy_limit_price>`__."
" If the criteria are met, the buy order will be filled on the next bar. "
"The time at which the order is filled can be configured with "
"`StrategyConfig.buy_delay "
"<https://www.pybroker.com/en/latest/reference/pybroker.config.html#pybroker.config.StrategyConfig.buy_delay>`__,"
" and its fill price can be set with `ExecContext.buy_fill_price "
"<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.buy_fill_price>`__."
" By default, buy orders are filled on the next bar (``buy_delay=1``) and "
"at a `fill price equal to the midpoint between that bar's low and high "
"price "
"<https://www.pybroker.com/en/latest/reference/pybroker.common.html#pybroker.common.PriceType.MIDDLE>`__."
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:164 a
#: ad7445203eae48f78457910b45d3b911
msgid ""
"Finally, `ctx.hold_bars "
"<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.hold_bars>`__"
" specifies how many bars to hold the position for before liquidating it. "
"When liquidated, the shares are sold at market price equal to "
"`ExecContext.sell_fill_price "
"<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.sell_fill_price>`__,"
" which is configurable and defaults to the midpoint between the bar's low"
" and high price."
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:167 a
#: b62ed284e0344cf7b0bc693d287d760c
msgid ""
"To add the ``buy_low`` rules to the ``Strategy`` for AAPL and MSFT, you "
"will use `add_execution "
"<https://www.pybroker.com/en/latest/reference/pybroker.strategy.html#pybroker.strategy.Strategy.add_execution>`__:"
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:189 a
#: a0978d47b697402fa369c93eb02cd15c
msgid "Adding a Second Execution"
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:191 a
#: fefac784301f457f9e158045103ba7bd
msgid ""
"You can use different sets of trading rules for different tickers within "
"the same ``Strategy`` instance. In other words, you are not restricted to"
" using only one set of trading rules for a single group of tickers."
msgstr ""

#: ../../source/notebooks/2. 57f3d18f87b3417d9389825f0e7fe223 Backtesting
#: Strategy.ipynb:193 a
msgid ""
"To demonstrate this, a new set of rules for a short strategy is provided "
"in a function called ``short_high``, which is similar to the previous set"
" of rules:"
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:224 a
#: ac08ff6312564223ae0e85f0ff8d6a1c
msgid "The rules in ``short_high`` will be traded on ``TSLA``:"
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:245 a
#: ffc35bc2e19748cc901bf5d8d9fb7a33
msgid ""
"(Note, you can also retrieve bar data for another symbol by calling "
"`ExecContext#foreign "
"<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.foreign>`__)"
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:257 a
#: e370f38723a248f1b845758799e2237b
msgid "Running a Backtest"
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:259 a
#: dcf062a546a1450bb8872d633a32bc79
msgid ""
"To run a backtest, call the `backtest "
"<https://www.pybroker.com/en/latest/reference/pybroker.strategy.html#pybroker.strategy.Strategy.backtest>`__"
" method on the ``Strategy`` instance. Here is an example:"
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:376 a
#: db2bfc8947414f9babf1c04d40571d76
msgid ""
"That was fast! The ``backtest`` method will return an instance of "
"`TestResult "
"<https://www.pybroker.com/en/latest/reference/pybroker.strategy.html#pybroker.strategy.TestResult>`__."
" You can access various information and metrics about the backtest "
"through this instance. For example, to see the daily balances of the "
"portfolio, you can plot the market value using `Matplotlib "
"<https://matplotlib.org/>`__:"
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:434 a
#: c0426da0b328449ab9ab4e2413e8862c
msgid ""
"You can also access the daily balance of each position that was held, the"
" trades that were made for every entry and exit, and all of the orders "
"that were placed:"
msgstr ""

#: ../../source/notebooks/2. 28b83449bb414b9b91c56139521ac55f Backtesting
#: Strategy.ipynb:1339 a
msgid ""
"Additionally, ``result.metrics_df`` contains a DataFrame of metrics "
"calculated using the returns of the backtest. `You can read about what "
"these metrics mean on the reference documentation "
"<https://www.pybroker.com/en/latest/reference/pybroker.eval.html#pybroker.eval.EvalMetrics>`__."
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:1728 a
#: f94a46e09a30478ca64537a1aabf1b29
msgid "Filtering Backtest Data"
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:1730 a
#: c95f77c8ba024194813a367adbdccf21
msgid ""
"You can filter the data used for the backtest to only include specific "
"bars. For example, you can limit the strategy to trade only on Mondays by"
" filtering the data to only contain bars for Mondays:"
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:2074 a
#: c1b0fb985f8d4988a2162ed05c9c117a
msgid ""
"The data doesn't need to be downloaded again from Yahoo Finance because "
"caching is enabled and the cached data only needs to be filtered."
msgstr ""

#: ../../source/notebooks/2. Backtesting Strategy.ipynb:2076 a
#: a2cbae47dbe84cdf996a8f1f09ffff48
msgid ""
"You can also filter the data by time range, such as 9:30-10:30 AM, using "
"the `between_time "
"<https://www.pybroker.com/en/latest/reference/pybroker.strategy.html#pybroker.strategy.Strategy.backtest>`__"
" argument."
msgstr ""

#: ../../source/notebooks/2. 7ac6cbdc517b4d0e9bea780ea0b807c2 Backtesting
#: Strategy.ipynb:2078 a
#, python-format
msgid ""
"Although the metrics earlier indicate that we have a profitable strategy,"
" we may be misled by randomness. `In the next notebook, we'll discuss how"
" to use bootstrapping to further evaluate our trading strategies "
"<https://www.pybroker.com/en/latest/notebooks/3.%20Evaluating%20with%20Bootstrap%20Metrics.html>`__."
msgstr ""

#~ msgid ""
#~ "We're all set to test a basic "
#~ "trading strategy using **PyBroker**! To "
#~ "get started, we'll import the necessary"
#~ " classes listed below:"
#~ msgstr ""

#~ msgid ""
#~ "For our backtest, we'll be using "
#~ "`Yahoo Finance <https://finance.yahoo.com>`__ as "
#~ "our `DataSource "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.data.html#pybroker.data.DataSource>`__."
#~ " We'll also be using data source "
#~ "caching to ensure that we only "
#~ "download the necessary data once when"
#~ " we run our backtests."
#~ msgstr ""

#~ msgid ""
#~ "The next step is to set up a"
#~ " new instance of the `Strategy "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.strategy.html#pybroker.strategy.Strategy>`__"
#~ " class which will be used to "
#~ "perform a backtest on our trading "
#~ "strategy. Here's how you can do "
#~ "it:"
#~ msgstr ""

#~ msgid ""
#~ "First, you can create a `StrategyConfig"
#~ " "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.config.html#pybroker.config.StrategyConfig>`__"
#~ " object to configure the ``Strategy``. "
#~ "In this case, we're setting the "
#~ "initial cash to ``500,000``:"
#~ msgstr ""

#~ msgid ""
#~ "A data source: In this case, we're"
#~ " using Yahoo Finance as the data "
#~ "source."
#~ msgstr ""

#~ msgid ""
#~ "The limit price of the order is"
#~ " set with `buy_limit_price "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.buy_limit_price>`__."
#~ " If the criteria are met, the "
#~ "buy order will be filled on the"
#~ " next bar. The time at which "
#~ "the order is filled can be "
#~ "configured with `StrategyConfig.buy_delay "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.config.html#pybroker.config.StrategyConfig.buy_delay>`__,"
#~ " and its fill price can be set"
#~ " with `ExecContext.buy_fill_price "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.buy_fill_price>`__."
#~ " By default, buy orders are filled"
#~ " on the next bar (``buy_delay=1``) "
#~ "and at a `fill price equal to "
#~ "the midpoint between that bar's open "
#~ "and close price "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.common.html#pybroker.common.PriceType.MIDDLE>`__."
#~ msgstr ""

#~ msgid ""
#~ "Finally, `ctx.hold_bars "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.hold_bars>`__"
#~ " specifies how many bars to hold "
#~ "the position for before liquidating it."
#~ " When liquidated, the shares are sold"
#~ " at market price equal to "
#~ "`ExecContext.sell_fill_price "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.sell_fill_price>`__,"
#~ " which is configurable and defaults "
#~ "to the midpoint between the bar's "
#~ "open and close price."
#~ msgstr ""

#~ msgid ""
#~ "The data doesn't need to be "
#~ "downloaded again from Yahoo Finance "
#~ "because caching is enabled and the "
#~ "cached data only needs to be "
#~ "filtered."
#~ msgstr ""

#~ msgid ""
#~ "Although the metrics earlier indicate "
#~ "that we have a profitable strategy, "
#~ "we may be misled by randomness. "
#~ "`In the next notebook, we'll discuss "
#~ "how to use bootstrapping to further "
#~ "evaluate our trading strategies "
#~ "<https://www.pybroker.com/en/latest/notebooks/3.%20Evaluating%20with%20Bootstrap%20Metrics.html>`__."
#~ msgstr ""

#~ msgid ""
#~ "We’re all set to test a basic "
#~ "trading strategy using **PyBroker**! To "
#~ "get started, we’ll import the necessary"
#~ " classes listed below:"
#~ msgstr ""

#~ msgid ""
#~ "For our backtest, we’ll be using "
#~ "`Yahoo Finance <https://finance.yahoo.com>`__ as "
#~ "our `DataSource "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.data.html#pybroker.data.DataSource>`__."
#~ " We’ll also be using data source "
#~ "caching to ensure that we only "
#~ "download the necessary data once when"
#~ " we run our backtests."
#~ msgstr ""

#~ msgid ""
#~ "The next step is to set up a"
#~ " new instance of the `Strategy "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.strategy.html#pybroker.strategy.Strategy>`__"
#~ " class which will be used to "
#~ "perform a backtest on our trading "
#~ "strategy. Here’s how you can do "
#~ "it:"
#~ msgstr ""

#~ msgid ""
#~ "First, you can create a `StrategyConfig"
#~ " "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.config.html#pybroker.config.StrategyConfig>`__"
#~ " object to configure the ``Strategy``. "
#~ "In this case, we’re setting the "
#~ "initial cash to ``500,000``:"
#~ msgstr ""

#~ msgid ""
#~ "A data source: In this case, we’re"
#~ " using Yahoo Finance as the data "
#~ "source."
#~ msgstr ""

#~ msgid ""
#~ "The limit price of the order is"
#~ " set with `buy_limit_price "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.buy_limit_price>`__."
#~ " If the criteria are met, the "
#~ "buy order will be filled on the"
#~ " next bar. The time at which "
#~ "the order is filled can be "
#~ "configured with `StrategyConfig.buy_delay "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.config.html#pybroker.config.StrategyConfig.buy_delay>`__,"
#~ " and its fill price can be set"
#~ " with `ExecContext.buy_fill_price "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.buy_fill_price>`__."
#~ " By default, buy orders are filled"
#~ " on the next bar (``buy_delay=1``) "
#~ "and at a `fill price equal to "
#~ "the midpoint between that bar’s open "
#~ "and close price "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.common.html#pybroker.common.PriceType.MIDDLE>`__."
#~ msgstr ""

#~ msgid ""
#~ "Finally, `ctx.hold_bars "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.hold_bars>`__"
#~ " specifies how many bars to hold "
#~ "the position for before liquidating it."
#~ " When liquidated, the shares are sold"
#~ " at market price equal to "
#~ "`ExecContext.sell_fill_price "
#~ "<https://www.pybroker.com/en/latest/reference/pybroker.context.html#pybroker.context.ExecContext.sell_fill_price>`__,"
#~ " which is configurable and defaults "
#~ "to the midpoint between the bar’s "
#~ "open and close price."
#~ msgstr ""

#~ msgid ""
#~ "The data doesn’t need to be "
#~ "downloaded again from Yahoo Finance "
#~ "because caching is enabled and the "
#~ "cached data only needs to be "
#~ "filtered."
#~ msgstr ""

#~ msgid ""
#~ "Although the metrics earlier indicate "
#~ "that we have a profitable strategy, "
#~ "we may be misled by randomness. "
#~ "`In the next notebook, we’ll discuss "
#~ "how to use bootstrapping to further "
#~ "evaluate our trading strategies "
#~ "<https://www.pybroker.com/en/latest/notebooks/3.%20Evaluating%20with%20Bootstrap%20Metrics.html>`__."
#~ msgstr ""

